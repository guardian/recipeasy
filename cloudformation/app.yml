AWSTemplateFormatVersion: '2010-09-09'
Description: 'Off Platform - Recipeasy'
Parameters:
  Stack:
    Description: 'Stack name'
    Type: String
    AllowedValues:
      - content-api-recipeasy
    Default: content-api-recipeasy
  Stage:
    Description: 'Environment name'
    Type: String
    Default: PROD
  VPC:
    Description: 'Virtual Private Cloud to run EC2 instances within'
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Description: 'Subnets to run load balancer within'
    Type: 'List<AWS::EC2::Subnet::Id>'
  SSLCertificate:
    Description: 'The ARN of the SSL certificate to use for the ELB'
    Type: String
  AMI:
    Description: 'AMI ID'
    Type: String
  SecurityGroupToAccessPostgress:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: 'Postgres security group used in recipeasy'
  LoggingKinesisStream:
    Type: String
    Description: "The name of the logging kinesis stream"
  STSAtomRoleToAssume:
    Type: String
    Description: 'The ARN of the STS role to assume for publishing atom in Kinesis streams in the Composer account'
  STSAuxiliaryAtomRoleToAssume:
    Type: String
    Description: 'The ARN of the STS role to assume for publishing auxiliary atom in Kinesis streams in the Composer account'
Resources:
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  AppPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: download-app-from-s3
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::content-api-dist/*'
          - Effect: Allow
            Action: 'ec2:DescribeTags'
            Resource: '*'
          - Effect: Allow
            Action: 'dynamodb:ListTables'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
            Resource:
              !Sub 'arn:aws:dynamodb:*:*:table/config-${Stack}'
      Roles:
        - !Ref RootRole
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets
      CrossZone: true
      Listeners:
        - Protocol: HTTP
          LoadBalancerPort: 80
          InstancePort: 9000
        - Protocol: HTTPS
          LoadBalancerPort: 443
          InstancePort: 9000
          SSLCertificateId: !Ref SSLCertificate
      HealthCheck:
        Target: 'HTTP:9000/healthcheck'
        Timeout: 5
        Interval: 10
        UnhealthyThreshold: 2
        HealthyThreshold: 2
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage
        - Key: App
          Value: recipeasy
  AutoscalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      AvailabilityZones: { 'Fn::GetAZs': '' }
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
        - !Ref LoadBalancer
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true
        - Key: App
          Value: recipeasy
          PropagateAtLaunch: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref ApplicationSecurityGroup
        - !Ref SecurityGroupToAccessPostgress
      InstanceType: t2.medium
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        'Fn::Base64':
            !Sub |
              #!/bin/bash -ev
              adduser --disabled-password content-api

              aws configure set region ${AWS::Region}

              aws s3 cp s3://content-api-dist/authorized_keys /home/ubuntu/.ssh/authorized_keys
              cd /home/content-api

              mkdir -p /etc/gu
              mkdir logs

              echo 'STAGE=${Stage}' > /etc/gu/install_vars

              aws s3 cp s3://content-api-dist/${Stack}/${Stage}/recipeasy/recipeasy.service /etc/systemd/system/recipeasy.service
              aws s3 cp s3://content-api-dist/${Stack}/${Stage}/recipeasy/recipeasy-0.1-SNAPSHOT.tgz .
              tar xfv recipeasy-0.1-SNAPSHOT.tgz
              mv recipeasy-0.1-SNAPSHOT recipeasy

              chown -R content-api /home/content-api /etc/gu
              chgrp -R content-api /home/content-api /etc/gu

              systemctl start recipeasy
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Unrestricted access on ports 80 and 443'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SSH and HTTP'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 77.91.248.0/21
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 77.91.248.0/21
  AssumeSTSAtomAndAuxiliaryRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'assume-composer-role'
      PolicyDocument:
        Statement:
         - Effect: Allow
           Action: 'sts:AssumeRole'
           Resource:
            - !Ref STSAtomRoleToAssume
            - !Ref STSAuxiliaryAtomRoleToAssume
      Roles:
        - !Ref RootRole
  KinesisLogsSenderPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'kinesis-logs-sender'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'kinesis:PutRecord'
              - 'kinesis:PutRecords'
              - 'kinesis:DescribeStream'
            Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${LoggingKinesisStream}'
      Roles:
        - !Ref RootRole
  Ec2DescribeTagsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'ec2-describe-tags'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeTags'
            Resource: '*'
      Roles:
        - !Ref RootRole
Outputs:
  LoadBalancer:
    Value:
      !GetAtt LoadBalancer.DNSName
